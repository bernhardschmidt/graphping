#!/usr/bin/python3
#
#   Copyright 2013 Martijn Grendelman <m@rtijn.net>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

"""
Ping-graphite - send ping statistics for multiple hosts to Graphite

Requires: fping, python-daemon
"""

import sys
import os
import signal
import subprocess
import re
import logging
import logging.handlers
import errno
import time
import socket
import datetime
import statistics
import argparse
import tomllib
from threading import Event
from pprint import pprint, pformat

def handle_signal (sig, _frame):
    app.logger.info ("Received signal (%s)" % signal.Signals(sig).name)

    if sig == signal.SIGUSR1:
        app.logger.warning("Setting log level to 'DEBUG'")
        app.logger.setLevel(logging.DEBUG)
    else:
        app.logger.warning ("Going to exit.")
        if app.ping:
            app.logger.warning("Terminating ping...")
            app.ping.terminate()
            app.ping.communicate()
        else:
            app.logger.warning("No ping running.")
        app.ping = False
        app.stop.set()

class StreamToLogger(object):
    """
    Fake file-like stream object that redirects writes to a logger instance.
    """
    def __init__(self, logger, log_level=logging.ERROR):
        self.logger = logger
        self.log_level = log_level
        self.linebuf = ''

    def write(self, buf):
        for line in buf.rstrip().splitlines():
            self.logger.log(self.log_level, line.rstrip())

class App:

    def __init__(self):
        self.stop = Event()
        self.level = logging.INFO

    def setup_logging(self):
        os.umask(0o022)
        self.logger = logging.getLogger()
        self.logger.setLevel(self.level)
        formatter = logging.Formatter('%(asctime)s [%(process)d] %(levelname)s: %(message)s','%Y-%m-%d %H:%M:%S')
        try:
            loghandler = logging.handlers.WatchedFileHandler(self.logfile)
        except IOError:
            print("Could not open logfile (%s)" % self.logfile)
            return False

        loghandler.setFormatter(formatter)
        self.logger.addHandler(loghandler)

        if self.daemonize == True:
           # Redirect stdout and stderr to logger, using StreamToLogger object that handles writes
            sys.stdout = StreamToLogger(self.logger, logging.INFO)
            sys.stderr = StreamToLogger(self.logger, logging.ERROR)

        else:
            # Set up a second loghandler, that writes to stderr
            loghandler2 = logging.StreamHandler(sys.stderr)
            loghandler2.setFormatter(formatter)
            self.logger.addHandler(loghandler2)

        return True

    def process_options(self):
        parser = argparse.ArgumentParser(
                prog='graphping',
                description='Send ping statistics for multiple hosts to Graphite')
        parser.add_argument('--host', default='localhost')
        parser.add_argument('--port', type=int, default=2003)
        parser.add_argument('--prefix', default='ping')
        parser.add_argument('--daemon', action='store_true')
        parser.add_argument('--fping', default='/usr/bin/fping')
        parser.add_argument('--logfile', default='/tmp/graphping.log')
        parser.add_argument('--packets', type=int, default=30)
        parser.add_argument('--pktsize', type=int, default=1000)
        parser.add_argument('--config', type=str)
        parser.add_argument('target', nargs='+')
        args = parser.parse_args()

        if args.config:
            with open(args.config, "rb") as f:
                config = tomllib.load(f)
            parser.set_defaults(**config)
            args = parser.parse_args()

        self.g_host = args.host
        self.g_port = args.port
        self.g_prefix = args.prefix
        self.daemonize = args.daemon
        self.fping = args.fping
        self.packets = args.packets
        self.pktsize = args.pktsize
        self.logfile = args.logfile
        self.targets = args.target

    def usage(self):
        print("Usage: ping-graphite <target> [<target> ...]")
        sys.exit(2)

    def main(self):

        if self.setup_logging():
            cmd = [ self.fping, '-c', str(self.packets), '-b', str(self.pktsize), '-p', '100', ] + self.targets

            while not self.stop.is_set():

                rtt = {}
                sry = {}
                for t in self.targets:
                    rtt[t] = []
                    sry[t] = {}

                self.logger.info("Fpinging %d targets x %d packets" % (len(self.targets), self.packets))
                self.ping = subprocess.Popen(cmd, bufsize=256, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
                while not self.stop.is_set():
                    # A USR1 signal causes an 'Interrupted system call' that we should
                    # handle gracefully
                    try:
                        raw_line = self.ping.stdout.readline().decode('UTF-8')
                    except IOError as e:
                        if e.errno == errno.EINTR:
                            continue

                    # If 'fping' is done/gone, terminate. This also catches a SIGINT.
                    if raw_line == '':
                        break

                    l = raw_line.rstrip()

                    # latinum : [0], 84 bytes, 6.46 ms (6.46 avg, 0% loss)
                    m = re.match('([^ ]*)\s* : \[\d+\]+, \d+ bytes, (.*) ms', l)
                    if m:
                        #sys.stderr.write('.')
                        #sys.stderr.flush()
                        rtt[m.group(1)].append(float(m.group(2)))
                        continue

                    # latinum.isaac.local : xmt/rcv/%loss = 30/30/0%, min/avg/max = 5.99/6.30/6.67
                    m = re.match('([^ ]*)\s* : xmt/rcv/%loss = \d+/\d+/(\d+)%, min/avg/max = (.*)/(.*)/(.*)', l)
                    if m:
                        #sys.stderr.write('*')
                        #sys.stderr.flush()
                        t = m.group(1)
                        sry[t]['loss'] = int(m.group(2))
                        sry[t]['min'] = float(m.group(3))
                        sry[t]['avg'] = float(m.group(4))
                        sry[t]['max'] = float(m.group(5))

                if self.ping:
                    ret = self.ping.poll()
                    if not ret is None:
                        self.logger.info("Subprocess exited with status %d" % ret)
                    self.ping.communicate()
                self.ping = False

                # Escape
                if self.stop.is_set():
                    return

                # Process and send the results
                ts = time.time()
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect((self.g_host, self.g_port))

                for target,summary in sry.items():
                    safe_target = target.replace('.', '_')
                    m_loss = self.g_prefix + '.' + safe_target + '.packetloss'
                    m_median = self.g_prefix + '.' + safe_target + '.medianrtt'
                    m_stdev = self.g_prefix + '.' + safe_target + '.stdevrtt'
                    m_min = self.g_prefix + '.' + safe_target + '.minrtt'
                    m_avg = self.g_prefix + '.' + safe_target + '.avgrtt'
                    m_max = self.g_prefix + '.' + safe_target + '.maxrtt'

                    try:
                        self.logger.info("Sending data for %s. ts=%d => %s" % (safe_target, ts,
                            datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')))
                        s.send(("%s %d %d\n" % (m_loss, summary['loss'], ts)).encode('ASCII'))
                        s.send(("%s %.2f %d\n" % (m_median, statistics.median(rtt[target]), ts)).encode('ASCII'))
                        s.send(("%s %.2f %d\n" % (m_stdev, statistics.stdev(rtt[target]), ts)).encode('ASCII'))
                        s.send(("%s %.2f %d\n" % (m_min, summary['min'], ts)).encode('ASCII'))
                        s.send(("%s %.2f %d\n" % (m_avg, summary['avg'], ts)).encode('ASCII'))
                        s.send(("%s %.2f %d\n" % (m_max, summary['max'], ts)).encode('ASCII'))
                    except Exception as e:
                        self.logger.info("Could not send! Summary:")
                        self.logger.info(pformat(summary))

                s.close()

                # Wait for the next minute
                m0 = 60 - time.gmtime().tm_sec
                self.logger.info("Sleeping for %d seconds" % m0)
                self.stop.wait(m0)

            return

if __name__ == "__main__":

    app = App()
    app.process_options()

    if app.daemonize == True:
        import daemon
        context = daemon.DaemonContext()
        context.signal_map = {
            signal.SIGTERM: handle_signal,
            signal.SIGINT: handle_signal,
            signal.SIGUSR1: handle_signal
        }

        with context:
            app.main()
            app.logger.warning ("Done.")

    else:
        signal.signal (signal.SIGTERM, handle_signal)
        signal.signal (signal.SIGINT, handle_signal)
        signal.signal (signal.SIGUSR1, handle_signal)
        app.main()
        app.logger.warning ("Done.")
